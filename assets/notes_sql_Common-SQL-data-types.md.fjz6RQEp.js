import{_ as s,D as i,c as l,m as o,a,I as t,U as n,o as r}from"./chunks/framework.-ML-6clc.js";const f=JSON.parse('{"title":"Common SQL Data Types","titleTemplate":"SQL","description":"Common SQL Data Types","frontmatter":{"title":"Common SQL Data Types","titleTemplate":"SQL","description":"Common SQL Data Types","head":[["meta",{"name":"description","content":"Common SQL Data Types"}]],"tags":["SQL"],"categories":["Notes"]},"headers":[],"relativePath":"notes/sql/Common-SQL-data-types.md","filePath":"notes/sql/Common-SQL-data-types.md","lastUpdated":1704943814000}'),c={name:"notes/sql/Common-SQL-data-types.md"},p={id:"common-sql-data-types",tabindex:"-1"},m=o("a",{class:"header-anchor",href:"#common-sql-data-types","aria-label":'Permalink to "Common SQL Data Types <Badge type="tip" text="SQL" /><Badge type="warning" text="Notes" />"'},"​",-1),d=n('<h2 id="numeric-types" tabindex="-1">Numeric Types <a class="header-anchor" href="#numeric-types" aria-label="Permalink to &quot;Numeric Types&quot;">​</a></h2><ul><li>INT: Integers (whole numbers) for storing counts, ages, etc. (e.g., 25, -10)</li><li>DECIMAL: Decimal numbers for precise values like prices, measurements (e.g., 3.14159, 125.99)</li><li>FLOAT: Floating-point numbers for very large or very small numbers (e.g., 1.234e-5, 3.14159265359)</li></ul><h2 id="text-types" tabindex="-1">Text Types <a class="header-anchor" href="#text-types" aria-label="Permalink to &quot;Text Types&quot;">​</a></h2><ul><li>VARCHAR: Variable-length character strings for names, address.</li><li>CHAR: Fixed-length character strings for codes, abbreviations (e.g., &quot;CN&quot;, &quot;US&quot;)</li><li>TEXT: Large text blocks for descriptions, articles.</li></ul><h2 id="date-and-time-types" tabindex="-1">Date and Time Types <a class="header-anchor" href="#date-and-time-types" aria-label="Permalink to &quot;Date and Time Types&quot;">​</a></h2><ul><li>DATE: Dates (e.g., 2024-01-10)</li><li>TIME: Times (e.g., 18:24:00)</li><li>TIMESTAMP: Date and time combinations (e.g., 2024-01-10 18:24:00)</li></ul><h2 id="boolean-type" tabindex="-1">Boolean Type <a class="header-anchor" href="#boolean-type" aria-label="Permalink to &quot;Boolean Type&quot;">​</a></h2><ul><li>BOOLEAN: True or false values for logical conditions (e.g., TRUE, FALSE)</li></ul><h2 id="special-types" tabindex="-1">Special Types <a class="header-anchor" href="#special-types" aria-label="Permalink to &quot;Special Types&quot;">​</a></h2><ul><li>NULL:Represents the absence of a value or unknown data.</li></ul><h2 id="other-types" tabindex="-1">Other Types <a class="header-anchor" href="#other-types" aria-label="Permalink to &quot;Other Types&quot;">​</a></h2><ul><li>BLOB:Binary data</li><li>GEOGRAPHY</li><li>GEOMETRY</li><li>IMAGE</li><li>JSON</li><li>...</li></ul>',12);function h(u,T,y,_,g,S){const e=i("Badge");return r(),l("div",null,[o("h1",p,[a("Common SQL Data Types "),t(e,{type:"tip",text:"SQL"}),t(e,{type:"warning",text:"Notes"}),a(),m]),d])}const L=s(c,[["render",h]]);export{f as __pageData,L as default};
