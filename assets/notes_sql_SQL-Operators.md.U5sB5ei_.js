import{_ as r,E as c,c as s,m as t,a as o,J as a,V as d,o as i}from"./chunks/framework.NnQCR_Xz.js";const L=JSON.parse('{"title":"Operators","titleTemplate":"SQL","description":"SQL Operators","frontmatter":{"title":"Operators","titleTemplate":"SQL","description":"SQL Operators","head":[["meta",{"name":"description","content":"SQL Operators"}]],"tags":["SQL"],"categories":["Notes"]},"headers":[],"relativePath":"notes/sql/SQL-Operators.md","filePath":"notes/sql/SQL-Operators.md","lastUpdated":1705969451000}'),p={name:"notes/sql/SQL-Operators.md"},n={id:"sql-operators",tabindex:"-1"},l=t("a",{class:"header-anchor",href:"#sql-operators","aria-label":'Permalink to "SQL Operators <Badge type="tip" text="SQL" /><Badge type="warning" text="Notes" />"'},"​",-1),h=d('<h2 id="arithmetic-operators" tabindex="-1">Arithmetic Operators <a class="header-anchor" href="#arithmetic-operators" aria-label="Permalink to &quot;Arithmetic Operators&quot;">​</a></h2><p>Perform mathematical calculations: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p><h2 id="comparison-operators" tabindex="-1">Comparison Operators: <a class="header-anchor" href="#comparison-operators" aria-label="Permalink to &quot;Comparison Operators:&quot;">​</a></h2><p>Compare values for equality or order: <code>=</code>, <code>&lt;&gt;</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>!&lt;</code>, <code>!&gt;</code></p><h2 id="logical-operators" tabindex="-1">Logical Operators <a class="header-anchor" href="#logical-operators" aria-label="Permalink to &quot;Logical Operators&quot;">​</a></h2><p>Combine multiple conditions for complex logical expression: <code>AND</code>, <code>OR</code>, <code>NOT</code></p><h2 id="bitwise-operators" tabindex="-1">Bitwise Operators <a class="header-anchor" href="#bitwise-operators" aria-label="Permalink to &quot;Bitwise Operators&quot;">​</a></h2><p>Manipulate individual bits with binary data: <code>&amp;</code>, <code>|</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></p><h2 id="string-operators" tabindex="-1">String Operators <a class="header-anchor" href="#string-operators" aria-label="Permalink to &quot;String Operators&quot;">​</a></h2><p>Concatenate or modify text strings. <code>||</code>(concatenation), <code>LIKE</code>, <code>SUBSTRING</code></p><h2 id="assignment-operators" tabindex="-1">Assignment Operators <a class="header-anchor" href="#assignment-operators" aria-label="Permalink to &quot;Assignment Operators&quot;">​</a></h2><p>Assign values to variables: <code>=</code>, <code>:=</code></p><h2 id="special-operators" tabindex="-1">Special Operators: <a class="header-anchor" href="#special-operators" aria-label="Permalink to &quot;Special Operators:&quot;">​</a></h2><p>Serve specific purposes in SQL statements: <code>IN</code>, <code>BETWEEN</code>, <code>IS NULL</code>, <code>EXIST</code>, <code>ANY</code>, <code>ALL</code></p><h2 id="operator-precedence" tabindex="-1">Operator Precedence <a class="header-anchor" href="#operator-precedence" aria-label="Permalink to &quot;Operator Precedence&quot;">​</a></h2><p>SQL follows a specific order of operations (precedence) when evaluating expressions. Arithmetic operators have higher precedence than comparison operators, which have higher precedence than logical operators. Parentheses can be used to override default precedence.</p>',16);function m(g,u,_,O,S,f){const e=c("Badge");return i(),s("div",null,[t("h1",n,[o("SQL Operators "),a(e,{type:"tip",text:"SQL"}),a(e,{type:"warning",text:"Notes"}),o(),l]),h])}const q=r(p,[["render",m]]);export{L as __pageData,q as default};
